{"version":3,"sources":["ng://ngx-croppie/src/app/modules/ngx-croppie/ngx-croppie.component.ts","ng://ngx-croppie/src/app/modules/ngx-croppie/ngx-croppie.module.ts"],"names":["NgxCroppieComponent","type","size","EventEmitter","Object","defineProperty","prototype","this","imgUrl","url","_croppie","bindToCroppie","imageUrl","points","defaultZoom","ngOnInit","Croppie","imageEdit","nativeElement","croppieOptions","zoom","bind","newResult","_this","result","outputFormatOptions","then","res","emit","rotate","degrees","get","Component","args","selector","template","ViewChild","Input","Output","NgxCroppieModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"mWAAA,IAAAA,EAAA,iDAgB+C,CAAEC,KAAM,SAAUC,KAAM,6BAC/C,cAEpB,IAAIC,EAAAA,oBAGPC,OAAAC,eAAIL,EAAAM,UAAA,WAAQ,KAAZ,WACC,OAAOC,KAAKC,qBAESC,GAClBF,KAAKC,SAAWC,IACnBF,KAAKC,OAASC,EACVF,KAAKG,UACRH,KAAKI,cAAcJ,KAAKK,SAAUL,KAAKM,OAAQN,KAAKO,+CAItDd,EAAAM,UAAAS,SAAA,WACCR,KAAKG,SAAW,IAAIM,EAAQT,KAAKU,UAAUC,cAAeX,KAAKY,gBAC/DZ,KAAKI,cAAcJ,KAAKK,SAAUL,KAAKM,OAAQN,KAAKO,cAG7Cd,EAAAM,UAAAK,uBAAcF,EAAaI,EAAkBO,GACpDb,KAAKG,SAASW,KAAK,CAAEZ,IAAGA,EAAEI,OAAMA,EAAEO,KAAIA,KAGvCpB,EAAAM,UAAAgB,UAAA,WAAA,IAAAC,EAAAhB,KACCA,KAAKG,SAASc,OAAOjB,KAAKkB,qBAAqBC,KAAK,SAACC,GACpDJ,EAAKC,OAAOI,KAAKD,MAInB3B,EAAAM,UAAAuB,OAAA,SAAOC,GACNvB,KAAKG,SAASmB,OAAOC,IAGtB9B,EAAAM,UAAAyB,IAAA,WACC,OAAOxB,KAAKG,SAASqB,2BA9CtBC,EAAAA,UAASC,KAAA,CAAC,CAEVC,SAAU,cACVC,SAAU,uFAGTC,EAAAA,UAASH,KAAA,CAAC,qCACVI,EAAAA,sBACAA,EAAAA,mCACAA,EAAAA,2BACAA,EAAAA,sBACAC,EAAAA,yBAOAD,EAAAA,WAzBF,GCAAE,EAAA,oDAICC,EAAAA,SAAQP,KAAA,CAAC,CACRQ,QAAS,CACPC,EAAAA,cAEFC,aAAc,CAAC3C,GACf4C,QAAS,CACP5C,SAVJ","sourcesContent":["import { Component, OnInit, Input, EventEmitter, Output, ViewChild, ElementRef } from '@angular/core';\n\nimport * as Croppie from 'croppie';\nimport { CroppieOptions, ResultOptions, CropData } from 'croppie';\n\nexport type Type = 'canvas' | 'base64' | 'html' | 'blob' | 'rawcanvas';\n\n@Component({\n\t// tslint:disable-next-line:component-selector\n\tselector: 'ngx-croppie',\n\ttemplate: `<div #imageEdit (update)=\"newResult()\"></div>`\n})\nexport class NgxCroppieComponent implements OnInit {\n\t@ViewChild('imageEdit') imageEdit: ElementRef;\n\t@Input() croppieOptions: CroppieOptions;\n\t@Input() points: number[];\n\t@Input() outputFormatOptions: ResultOptions = { type: 'base64', size: 'viewport' };\n\t@Input() defaultZoom = 0;\n\t@Output() result: EventEmitter<string | HTMLElement | Blob | HTMLCanvasElement>\n\t\t= new EventEmitter<string | HTMLElement | Blob | HTMLCanvasElement>();\n\tprivate _croppie: Croppie;\n\tprivate imgUrl: string;\n\tget imageUrl(): string {\n\t\treturn this.imgUrl;\n\t}\n\t@Input() set imageUrl(url: string) {\n\t\tif(this.imgUrl === url) { return; }\n\t\tthis.imgUrl = url;\n\t\tif (this._croppie) {\n\t\t\tthis.bindToCroppie(this.imageUrl, this.points, this.defaultZoom);\n\t\t}\n\t}\n\n\tngOnInit(): void {\n\t\tthis._croppie = new Croppie(this.imageEdit.nativeElement, this.croppieOptions);\n\t\tthis.bindToCroppie(this.imageUrl, this.points, this.defaultZoom);\n\t}\n\n\tprivate bindToCroppie(url: string, points: number[], zoom: number){\n\t\tthis._croppie.bind({ url, points, zoom });\n\t}\n\n\tnewResult() {\n\t\tthis._croppie.result(this.outputFormatOptions).then((res) => {\n\t\t\tthis.result.emit(res);\n\t\t});\n\t}\n\n\trotate(degrees: 90 | 180 | 270 | -90 | -180 | -270) {\n\t\tthis._croppie.rotate(degrees);\n\t}\n\n\tget(): CropData {\n\t\treturn this._croppie.get();\n\t}\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxCroppieComponent } from './ngx-croppie.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [NgxCroppieComponent],\n  exports: [\n    NgxCroppieComponent\n  ]\n})\nexport class NgxCroppieModule { }\n"]}